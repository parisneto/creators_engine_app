# .devcontainer/Dockerfile.prod (Optimized, No Build Stage)



# $ docker pull python:3.11-slim-bullseye
# 3.11-slim-bullseye: Pulling from library/python
# 5518fe2e0d6a: Pull complete
# ed689fbe2870: Pull complete
# 0bc035f08a90: Pull complete
# 5d3a81360c5b: Pull complete
# Digest: sha256:20c24be1778c0fade9232977044e8583d71ba2bb005d5eb38fef92f7e86ee983
# Status: Downloaded newer image for python:3.11-slim-bullseye
# docker.io/library/python:3.11-slim-bullseye

# What's next:
#     View a summary of image vulnerabilities and recommendations â†’ docker scout quickview python:3.11-slim-bullseye
# 19:23:07 parisneto@MacBook-Pro-de-Paris ~/github/yta_mdm_production/apps/ce_app.lab $ docker inspect python:3.11-slim-bullseye --format='{{index .RepoDigests 0}}'

# python@sha256:20c24be1778c0fade9232977044e8583d71ba2bb005d5eb38fef92f7e86ee983


        # # Stage 1: Base with Python and runtime OS dependencies
        # FROM python:3.11-slim-bullseye AS base
        # # DEV CI-CD is using FROM python:3.11-slim
        # # If your production runtime is Debian 12 (Bookworm), then libssl3 and libffi8 are the correct packages.
        # # If your production runtime were truly Debian 11 (Bullseye), then libssl1.1 and libffi7 would be correct.
        # # FROM us-central1-docker.pkg.dev/fleet-gamma-448616-m1/creatorsengine-app-repo/python-base:3.11-slim-bullseye-sha-20c24be AS base
        # # New line

        # # Install only essential RUNTIME system libraries needed by your Python packages
        # # Based on requirements.txt (Pillow, Matplotlib, google-cloud, etc.)
        # RUN apt-get update && apt-get install -y --no-install-recommends \
        #       # For Pillow:
        #       libjpeg62-turbo \
        #       libpng16-16 \
        #       # For Matplotlib:
        #       libfreetype6 \
        #       # General/Networking/Crypto (often needed by google-cloud deps):
        #       libssl1.1 \
        #       libffi7 \
        #       zlib1g \
        #       # Maybe needed by numpy/scipy via seaborn (optional, for potential performance):
        #       # libgomp1 \
        #       # Removed: libbrotli1, libsnappy1v5, liblz4-1, libzstd1 (add back if known needed)
        #  && apt-get clean && rm -rf /var/lib/apt/lists/*

# Upgrade to Debian 12 (Bookworm) like dev ci/cd fast deploy

FROM python:3.11-slim AS base


RUN apt-get update && apt-get install -y --no-install-recommends \
      # For Pillow:
      libjpeg62-turbo \
      libpng16-16 \
      # For Matplotlib:
      libfreetype6 \
      # General/Networking/Crypto (often needed by google-cloud deps):
      libssl3 \
      libffi8 \
      zlib1g \
      # Maybe needed by numpy/scipy via seaborn (optional, for potential performance):
      # libgomp1 \
      # Removed: libbrotli1, libsnappy1v5, liblz4-1, libzstd1 (add back if known needed)
 && apt-get clean && rm -rf /var/lib/apt/lists/*




# Stage 2: Final application image
FROM base AS final
# Or optionally try distroless again now that setup is simpler:
# FROM gcr.io/distroless/python3-debian11 AS final
# COPY --from=base / / # If using distroless, copy libs from the base stage

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=utf-8
ENV PORT=8080
# Set Streamlit vars (cleaner than CMD flags)
ENV STREAMLIT_SERVER_PORT=8080
ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0
ENV STREAMLIT_SERVER_ENABLE_CORS=false
ENV STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
ENV APPMODE="PROD"
# Consider these if you encounter locale issues
# ENV LC_ALL=C.UTF-8
# ENV LANG=C.UTF-8

WORKDIR /app

# --- Cache Optimization Point 1 ---
# Copy only requirements first. Layer invalidated only if requirements.txt changes.
COPY requirements.txt .

# Upgrade pip and Install Python dependencies using pre-built wheels
# Layer invalidated only if requirements.txt changes (or base image changes).
RUN python -m pip install --upgrade pip && \
    python -m pip install --no-cache-dir -r requirements.txt

# --- Cache Optimization Point 2 ---
# Copy the rest of your application code LAST.
# Layer invalidated only if application code changes.
COPY . .

# Expose the port the app runs on
EXPOSE 8080

# Run Streamlit using the Python installed in the base image
# Assumes 'streamlit' is installed via requirements.txt and is now in the PATH
# CMD ["streamlit", "run", "main.py"]
# old approach without env vars :
    # CMD ["/opt/python/bin/streamlit", "run", "main.py", "--server.port=8080", "--server.address=0.0.0.0", "--server.enableCORS=false", "--server.enableXsrfProtection=false"]

    #data retrieve and streamlit start :
# CMD ["/app/entrypoint.sh"]
# CMD ["streamlit", "run", "main.py"]
CMD ["bash", "-c", "python /app/utils/dataretriever.py && exec streamlit run main.py --server.port=8080 --server.address=0.0.0.0"]